// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.DeepSpace2019.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc1591.DeepSpace2019.Robot;

/**
 *
 */
public class driveManual extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    double m_initialDeg;
    double m_target;
    double m_rot = 0;
    int m_currentArray = 0;
    int m_targetArray;
    double m_posRotation = 1;
    double m_negRotation = -1;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public driveManual() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

        boolean slow = false;

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    if (Robot.oi.driveStick.getRawButtonPressed(9)) {
        if (slow) {
            slow = false;
        }
        else {
            slow = true;
        }
    }

        //this does not handle joystick rotation, might need to add later
        // m_rot = Robot.oi.driveStick.getRawAxis(2);
        if(Robot.oi.driveStick.getRawButtonPressed(5)){ //counter clockwise rocket angle
                if((m_currentArray == 0) || (m_currentArray == 1)){ //if 0 or 1, needs to be manually reset to bottom of array
                    m_targetArray = 7;
                } else if((m_currentArray % 2 == 0)) { //if even and not 0
                    m_targetArray = m_currentArray - 1;
                } else { //if odd and not 1
                    m_targetArray = m_currentArray - 2;
                }
                m_rot = m_negRotation;
                if(m_targetArray >= 8 || m_targetArray < 0){
                    System.out.println("ERROR: The angle array is greater than or equal to 8 or less than 0");
                }
                m_target = Robot.driveTrain.Angles.get(m_targetArray);
        }   
        else if(Robot.oi.driveStick.getRawButtonPressed(7)){ //counter clockwise right angles
                if(m_currentArray == 0){ //if 0, needs to be manually reset to near bottom of array
                    m_targetArray = 6;
                } else if(m_currentArray % 2 == 0) { //if even and not 0
                    m_targetArray = m_currentArray - 2;
                } else { //if odd 
                    m_targetArray = m_currentArray - 1;
                }
                m_rot = m_negRotation;
                if(m_targetArray >= 8 || m_targetArray < 0){
                    System.out.println("ERROR: The angle array is greater than or equal to 8 or less than 0");
                }
                m_target = Robot.driveTrain.Angles.get(m_targetArray);
        }   
        else if(Robot.oi.driveStick.getRawButtonPressed(6)){ //clockwise rocket angle
                if(m_currentArray == 7){ //if 7, needs to be manually reset to near top of array
                    m_targetArray = 1;
                } else if(m_currentArray % 2 == 0 || m_currentArray == 0) { //if even or 0
                    m_targetArray = m_currentArray + 1;
                } else { //if odd and not 7
                    m_targetArray = m_currentArray + 2;
                }
                m_rot = m_posRotation;
                if(m_targetArray >= 8 || m_targetArray < 0){
                    System.out.println("ERROR: The angle array is greater than or equal to 8 or less than 0");
                }
                m_target = Robot.driveTrain.Angles.get(m_targetArray);
        }   
        else if(Robot.oi.driveStick.getRawButtonPressed(8)){ //clockwise right angles
                if((m_currentArray == 6) || (m_currentArray == 7)){ //if 6 or 7, needs to be manually reset to top of array
                    m_targetArray = 0;
                } else if(m_currentArray % 2 == 0) { //if even or 0 and not 6 
                    m_targetArray = m_currentArray + 2;
                } else { //if odd and not 7
                    m_targetArray = m_currentArray + 1;
                }
                m_rot = m_posRotation;
                if(m_targetArray >= 8 || m_targetArray < 0){
                    System.out.println("ERROR: The angle array is greater than or equal to 8 or less than 0");
                }
                m_target = Robot.driveTrain.Angles.get(m_targetArray);
        }

        if((Robot.oi.driveStick.getMagnitude() > .05) && !slow && (m_rot == 0)){ //standard field oriented driving
            double strafe = Robot.oi.driveStick.getX();
            double vertical = -Robot.oi.driveStick.getY();
            double gyroDeg = Robot.AHRS.getAngle();
            Robot.driveTrain.fieldDrive(strafe, vertical, m_rot, gyroDeg);
        }   
        else if((Robot.oi.driveStick.getMagnitude() > .05) && slow && (m_rot == 0)){ //slow driving
                double strafe = Robot.oi.driveStick.getX();
                double vertical = -Robot.oi.driveStick.getY();
                double gyroDeg = Robot.AHRS.getAngle();
                Robot.driveTrain.slowfieldDrive(strafe, vertical, m_rot, gyroDeg);
        }
        else if(Robot.oi.driveStick.getMagnitude() < .05 && (m_rot == 0)){ //no movement to fix error readouts
                    Robot.driveTrain.fieldDrive(0, 0, 0, 0);
        }
        else if (m_rot != 0){ //if rotating (main rotate)
                double strafe = Robot.oi.driveStick.getX();
                double vertical = -Robot.oi.driveStick.getY();
                double gyroDeg = Robot.AHRS.getAngle();
                    Robot.driveTrain.movingRotation(strafe, vertical, m_rot, gyroDeg);;
                    if ((-1 < (m_target - Robot.AHRS.getYaw())) && ((m_target - Robot.AHRS.getYaw()) < 1)) {
                        m_rot = 0;
                        m_currentArray = m_targetArray;
                    }
        }   
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
